{"version":3,"sources":["Components/Utils/Input/Input.module.css","Components/ListItem/ListItem.module.css","Components/Utils/Button/Button.module.css","Components/ContactForm/ContactForm.module.css","Components/App/App.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/filter/filter-actions.js","redux/filter/filter-reducer.js","redux/store.js","utils/searchName.js","Components/Utils/Button/Button.jsx","utils/capitalize.js","Components/Utils/Input/Input.jsx","Components/ContactForm/ContactForm.jsx","Components/ListItem/ListItem.jsx","Components/ContactList/ContactList.jsx","utils/filter.js","Components/Filter/Filter.jsx","Components/App/App.jsx","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","genId","deleteContact","contactsReducer","createReducer","actions","state","filter","changeFilter","filterReducer","_","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","contacts","combineReducers","items","contactReducer","rootReducer","persistReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","searchName","array","query","find","el","connect","dispatch","onDeletedById","actionsContact","type","text","onClick","className","styles","button","capitalize","string","charAt","toUpperCase","slice","Input","pattern","title","onChange","input","required","ContactForm","handleChange","event","target","value","setState","handleSubmit","preventDefault","props","alert","onSubmit","this","form","Component","contactActions","ListItem","contact","item","filteredContacts","regExp","RegExp","test","filteredData","map","onChangeFilter","filterActions","App","app","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.90011d20.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Input_text__1XBSb\",\"input\":\"Input_input__2pSYd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ListItem_item__3DHBk\",\"text\":\"ListItem_text__213Fy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__369Hi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3WcCi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3RKb0\"};","import { v4 as genId } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction('contact/add', (name, number) => ({\r\n  payload: {\r\n    id: genId(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\nconst deleteContact = createAction('contact/delete');\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { addContact, deleteContact };\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\n\r\nconst INITIAL_STATE = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\n\r\nconst contactsReducer = createReducer(INITIAL_STATE, {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst changeFilter = createAction('contact/changeFilter');\r\n\r\nexport default { changeFilter };\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './filter-actions';\r\n\r\nconst INITIAL_STATE = '';\r\n\r\nconst filterReducer = createReducer(INITIAL_STATE, {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\nexport default filterReducer;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport { combineReducers } from 'redux';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport contactReducer from './contacts/contacts-reducer';\r\nimport filterReducer from './filter/filter-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\nconst contactsPersistConfig = {\r\n  key: 'contact',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst contacts = combineReducers({\r\n  items: contactReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nconst rootReducer = {\r\n  contacts: persistReducer(contactsPersistConfig, contacts),\r\n};\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { store, persistor };\r\n","const searchName = (array, query) => array.find(el => el.name === query);\nexport default searchName;\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport actionsContact from '../../../redux/contacts/contacts-actions';\nimport styles from './Button.module.css';\nconst Button = ({ type = 'button', text = 'Button', onDeletedById, id }) => {\n  const handleClick = () => {\n    if (!id) return;\n    onDeletedById(id);\n  };\n\n  return (\n    <button type={type} onClick={handleClick} className={styles.button}>\n      {text}\n    </button>\n  );\n};\nconst mapDispatchToProps = dispatch => ({\n  onDeletedById: id => dispatch(actionsContact.deleteContact(id)),\n});\n\nButton.propTypes = {\n  type: PropTypes.string,\n  text: PropTypes.string,\n  onClick: PropTypes.func,\n  id: PropTypes.string,\n};\nexport default connect(null, mapDispatchToProps)(Button);\n","const capitalize = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\nexport default capitalize;\n","import capitalize from '../../../utils/capitalize';\nimport styles from './Input.module.css';\nimport PropTypes from 'prop-types';\n\nconst Input = ({\n  type = 'text',\n  name = 'input',\n  pattern,\n  title = 'input',\n  onChange,\n}) => {\n  const text = capitalize(name);\n  return (\n    <label>\n      <span className={styles.text}>{text}</span>\n      <input\n        className={styles.input}\n        type={type}\n        name={name}\n        pattern={pattern}\n        title={title}\n        required\n        onChange={onChange}\n      />\n    </label>\n  );\n};\n\nInput.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string,\n  pattern: PropTypes.string,\n  title: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Input;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport searchName from '../../utils/searchName';\nimport contactActions from '../../redux/contacts/contacts-actions';\nimport Button from '../Utils/Button';\nimport Input from '../Utils/Input';\nimport styles from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = event => {\n    const {\n      target: { value, name },\n    } = event;\n\n    this.setState(() => ({\n      [name]: value,\n    }));\n  };\n  handleSubmit = event => {\n    event.preventDefault();\n    const { name, number } = this.state;\n    const { addContact, contacts } = this.props;\n\n    const isFind = searchName(contacts, name);\n    if (isFind) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    addContact(name, number);\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className={styles.form}>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          onChange={this.handleChange}\n        />\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          onChange={this.handleChange}\n        />\n        <Button type=\"submit\" text=\"Add contact\" />\n      </form>\n    );\n  }\n}\nconst mapDispatchToProps = dispatch => ({\n  addContact: (name, number) =>\n    dispatch(contactActions.addContact(name, number)),\n});\n\nconst mapStateToProps = state => ({ contacts: state.contacts.items });\n\nContactForm.propTypes = {\n  addContact: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import Button from '../Utils/Button';\nimport styles from './ListItem.module.css';\nimport PropTypes from 'prop-types';\n\nconst ListItem = ({ contact: { name, number, id } }) => {\n  return (\n    <li className={styles.item}>\n      <span className={styles.text}>\n        {name} : {number}\n      </span>\n      <Button text=\"Delete\" id={id} />\n    </li>\n  );\n};\nListItem.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string,\n    number: PropTypes.string,\n    id: PropTypes.string,\n  }),\n};\nexport default ListItem;\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ListItem from '../ListItem/ListItem';\nimport { filteredData } from '../../utils/filter';\n\nconst ContactList = ({ contacts, filter }) => {\n  const filteredContacts = filteredData(contacts, filter);\n  return (\n    <ul>\n      {filteredContacts.map(contact => (\n        <ListItem key={contact.id} contact={contact} />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array,\n};\nconst mapStateToProps = state => {\n  return {\n    contacts: state.contacts.items,\n    filter: state.contacts.filter,\n  };\n};\nexport default connect(mapStateToProps)(ContactList);\n","export const filteredData = (array, filter) => {\r\n  const regExp = new RegExp(filter, 'gi');\r\n\r\n  if (!filter) {\r\n    return array;\r\n  }\r\n  return array.filter(item => regExp.test(item.name));\r\n};\r\n","import { connect } from 'react-redux';\nimport filterActions from '../../redux/filter/filter-actions';\nimport Input from '../Utils/Input';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ onChangeFilter }) => {\n  return (\n    <Input type=\"text\" name=\"find contacts by name\" onChange={onChangeFilter} />\n  );\n};\nFilter.propTypes = {\n  onChange: PropTypes.func,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeFilter: ({ target: { value } }) =>\n    dispatch(filterActions.changeFilter(value)),\n});\nexport default connect(null, mapDispatchToProps)(Filter);\n","import ContactForm from '../ContactForm';\nimport ContactList from '../ContactList';\nimport Filter from '../Filter';\nimport styles from './App.module.css';\n\nconst App = () => {\n  return (\n    <div className={styles.app}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport ReactDOM from 'react-dom';\nimport store from './redux/store';\nimport App from './Components/App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}